from utility import *
from dynamics import MyController
x = np.array([ 7.81163783e-04, -2.05955010e-03, -9.98873695e-03, -1.43091373e-02,
       -1.28390367e-02, -1.86600590e-02, -2.68578576e-02, -2.32301073e-02,
       -2.18800797e-02, -1.78453987e-02, -9.58179068e-03, -1.16738314e-02,
       -1.16425914e-02, -7.48879108e-03, -8.07588280e-03, -8.35384092e-03,
       -1.06052252e-02, -1.18000521e-02, -1.69035757e-02, -2.08495706e-02,
       -1.27942785e-02, -1.09582592e-02, -1.05065435e-02, -9.68037142e-03,
       -1.32608859e-02, -1.14176364e-02, -7.78569846e-03, -5.25528674e-03,
       -9.24241704e-03, -1.39356068e-02, -8.11782959e-03, -4.78085395e-03,
       -6.47439348e-03, -5.30924832e-03, -6.46624350e-03, -9.16627710e-03,
       -8.77082851e-03, -7.07755831e-03, -8.86965798e-03, -4.43757084e-03,
       -1.93332368e-03, -8.68621809e-03, -8.49404023e-03, -5.70204214e-03,
        2.89797875e-03,  1.24421286e-02,  7.46479399e-03,  8.87020305e-03,
        9.95058813e-03,  2.61924571e-03, -8.89765759e-20,  1.67509236e-19,
        1.04719755e+00,  3.85569398e-19,  2.00000000e+01,  3.46410162e+01,
        1.01563486e-19, -3.54005774e-19,  3.99999114e-01,  6.90858834e-01,
        1.04717358e+00,  2.45450173e-04,  1.99999114e+01,  3.44448673e+01,
       -2.39697435e-03,  2.45450173e-02,  7.99988987e-01,  1.37779898e+00,
        1.04689974e+00,  3.04962163e-03,  1.99990758e+01,  3.42491477e+01,
       -2.49875126e-02,  2.55872129e-01,  1.19995360e+00,  2.06082953e+00,
        1.04594440e+00,  1.28322561e-02,  1.99973853e+01,  3.40539071e+01,
       -7.05460267e-02,  7.22391313e-01,  1.59988228e+00,  2.73995615e+00,
        1.04402445e+00,  3.24925317e-02,  1.99954828e+01,  3.38587546e+01,
       -1.21448853e-01,  1.24363625e+00,  1.99976958e+00,  3.41518087e+00,
        1.04100487e+00,  6.34130831e-02,  1.99932471e+01,  3.36637171e+01,
       -1.80509657e-01,  1.84841889e+00,  2.39960164e+00,  4.08650887e+00,
        1.03654121e+00,  1.09120901e-01,  1.99899597e+01,  3.34690829e+01,
       -2.65855751e-01,  2.72236289e+00,  2.79936389e+00,  4.75394401e+00,
        1.03028495e+00,  1.73185048e-01,  1.99862648e+01,  3.32744317e+01,
       -3.59770685e-01,  3.68405181e+00,  3.19905506e+00,  5.41748236e+00,
        1.02224372e+00,  2.55527240e-01,  1.99828521e+01,  3.30794027e+01,
       -4.44352285e-01,  4.55016740e+00,  3.59868132e+00,  6.07711627e+00,
        1.01261182e+00,  3.54157880e-01,  1.99797739e+01,  3.28839888e+01,
       -5.18837558e-01,  5.31289659e+00,  3.99825514e+00,  6.73283752e+00,
        1.00172081e+00,  4.65681832e-01,  1.99776082e+01,  3.26881356e+01,
       -5.70263538e-01,  5.83949863e+00,  4.39779032e+00,  7.38463903e+00,
        9.89916996e-01,  5.86552884e-01,  1.99759105e+01,  3.24920155e+01,
       -6.10117829e-01,  6.24760657e+00,  4.79728993e+00,  8.03251614e+00,
        9.77277457e-01,  7.15981769e-01,  1.99740500e+01,  3.22956962e+01,
       -6.53836122e-01,  6.69528189e+00,  5.19675588e+00,  8.67646533e+00,
        9.63842021e-01,  8.53560632e-01,  1.99725452e+01,  3.20992223e+01,
       -6.89707464e-01,  7.06260443e+00,  5.59619495e+00,  9.31648395e+00,
        9.49756034e-01,  9.97801138e-01,  1.99713612e+01,  3.19026398e+01,
       -7.18891228e-01,  7.36144617e+00,  5.99561031e+00,  9.95256909e+00,
        9.35070152e-01,  1.14818457e+00,  1.99701757e+01,  3.17058744e+01,
       -7.49696960e-01,  7.67689687e+00,  6.39500120e+00,  1.05847162e+01,
        9.19720730e-01,  1.30536265e+00,  1.99689132e+01,  3.15088361e+01,
       -7.85245209e-01,  8.04091094e+00,  6.79436613e+00,  1.12129190e+01,
        9.03595727e-01,  1.47048268e+00,  1.99675789e+01,  3.13114418e+01,
       -8.27255104e-01,  8.47109226e+00,  7.19370321e+00,  1.18371680e+01,
        8.86512432e-01,  1.64541562e+00,  1.99661296e+01,  3.11134637e+01,
       -8.81074406e-01,  9.02220192e+00,  7.59301076e+00,  1.24574492e+01,
        8.68183072e-01,  1.83310826e+00,  1.99646253e+01,  3.09146489e+01,
       -9.51861555e-01,  9.74706232e+00,  7.99229388e+00,  1.30737549e+01,
        8.48515019e-01,  2.03450913e+00,  1.99636868e+01,  3.07159302e+01,
       -1.01494377e+00,  1.03930242e+01,  8.39156450e+00,  1.36860928e+01,
        8.27770784e-01,  2.24693010e+00,  1.99633748e+01,  3.05178587e+01,
       -1.05947978e+00,  1.08490729e+01,  8.79083254e+00,  1.42944709e+01,
        8.06178723e-01,  2.46803280e+00,  1.99634299e+01,  3.03199452e+01,
       -1.09972629e+00,  1.12611972e+01,  9.19010489e+00,  1.48988921e+01,
        7.83805693e-01,  2.69713263e+00,  1.99638046e+01,  3.01221773e+01,
       -1.13757675e+00,  1.16487859e+01,  9.58938898e+00,  1.54993572e+01,
        7.60624009e-01,  2.93451307e+00,  1.99646047e+01,  2.99243295e+01,
       -1.18059161e+00,  1.20892581e+01,  9.98869319e+00,  1.60958662e+01,
        7.36549455e-01,  3.18103651e+00,  1.99658158e+01,  2.97265754e+01,
       -1.22686384e+00,  1.25630857e+01,  1.03880214e+01,  1.66884260e+01,
        7.11652115e-01,  3.43598526e+00,  1.99670010e+01,  2.95294032e+01,
       -1.26287009e+00,  1.29317897e+01,  1.07873707e+01,  1.72770475e+01,
        6.86150195e-01,  3.69712493e+00,  1.99679362e+01,  2.93327462e+01,
       -1.28732194e+00,  1.31821766e+01,  1.11867408e+01,  1.78617381e+01,
        6.60131924e-01,  3.96355202e+00,  1.99690707e+01,  2.91363187e+01,
       -1.31450513e+00,  1.34605326e+01,  1.15861407e+01,  1.84425033e+01,
        6.33407234e-01,  4.23721285e+00,  1.99709186e+01,  2.89401984e+01,
       -1.35796393e+00,  1.39055506e+01,  1.19855760e+01,  1.90193501e+01,
        6.05834453e-01,  4.51955812e+00,  1.99726123e+01,  2.87444752e+01,
       -1.39931412e+00,  1.43289766e+01,  1.23850371e+01,  1.95922828e+01,
        5.77606321e-01,  4.80861420e+00,  1.99734991e+01,  2.85487973e+01,
       -1.42349915e+00,  1.45766313e+01,  1.27845133e+01,  2.01613032e+01,
        5.48925302e-01,  5.10230784e+00,  1.99741162e+01,  2.83532494e+01,
       -1.44460274e+00,  1.47927321e+01,  1.31840001e+01,  2.07264145e+01,
        5.19812304e-01,  5.40042494e+00,  1.99745683e+01,  2.81578734e+01,
       -1.46669707e+00,  1.50189780e+01,  1.35834935e+01,  2.12876191e+01,
        4.90257572e-01,  5.70306539e+00,  1.99747750e+01,  2.79625895e+01,
       -1.48877612e+00,  1.52450674e+01,  1.39829883e+01,  2.18449213e+01,
        4.60188940e-01,  6.01096818e+00,  1.99747039e+01,  2.77676341e+01,
       -1.51808709e+00,  1.55452118e+01,  1.43824778e+01,  2.23983256e+01,
        4.29490877e-01,  6.32531634e+00,  1.99742422e+01,  2.75727877e+01,
       -1.55171917e+00,  1.58896043e+01,  1.47819554e+01,  2.29478297e+01,
        3.98159336e-01,  6.64615132e+00,  1.99735171e+01,  2.73776224e+01,
       -1.58143489e+00,  1.61938933e+01,  1.51814157e+01,  2.34934279e+01,
        3.66231628e-01,  6.97309105e+00,  1.99725103e+01,  2.71821984e+01,
       -1.61133592e+00,  1.65000798e+01,  1.55808560e+01,  2.40351138e+01,
        3.33755399e-01,  7.30564763e+00,  1.99715257e+01,  2.69863931e+01,
       -1.63628698e+00,  1.67555786e+01,  1.59802815e+01,  2.45728801e+01,
        3.00910206e-01,  7.64198242e+00,  1.99710196e+01,  2.67902350e+01,
       -1.64823240e+00,  1.68778998e+01,  1.63796937e+01,  2.51067205e+01,
        2.67746441e-01,  7.98157937e+00,  1.99702047e+01,  2.65938055e+01,
       -1.66814404e+00,  1.70817950e+01,  1.67790861e+01,  2.56366274e+01,
        2.34061430e-01,  8.32651388e+00,  1.99690379e+01,  2.63968895e+01,
       -1.70035703e+00,  1.74116560e+01,  1.71784595e+01,  2.61625947e+01,
        1.99788113e-01,  8.67747264e+00,  1.99682954e+01,  2.61998364e+01,
       -1.72697468e+00,  1.76842207e+01,  1.75778242e+01,  2.66846275e+01,
        1.65196044e-01,  9.03169544e+00,  1.99681771e+01,  2.60034434e+01,
       -1.73223230e+00,  1.77380588e+01,  1.79771882e+01,  2.72027466e+01,
        1.30839025e-01,  9.38351131e+00,  1.99682215e+01,  2.58084653e+01,
       -1.70346960e+00,  1.74435287e+01,  1.83765490e+01,  2.77169693e+01,
        9.71428873e-02,  9.72855976e+00,  1.99678563e+01,  2.56138090e+01,
       -1.66614412e+00,  1.70613158e+01,  1.87758992e+01,  2.82272945e+01,
        6.41262861e-02,  1.00666498e+01,  1.99671672e+01,  2.54187134e+01,
       -1.63551600e+00,  1.67476838e+01,  1.91752312e+01,  2.87337166e+01,
        3.17688559e-02,  1.03979898e+01,  1.99660320e+01,  2.52234940e+01,
       -1.60022702e+00,  1.63863247e+01,  1.95745428e+01,  2.92362288e+01,
        3.14418630e-20,  1.07233029e+01,  1.99651284e+01,  2.50277278e+01,
       -1.57665858e+00,  1.61449838e+01])


T = 1
N = 50
u = x[:N]
pos_x = x[np.arange(N, 9*N, 8)]
pos_y = x[np.arange(N+1, 9*N, 8)]
theta_block = x[np.arange(N+2, 9*N, 8)]
theta_tail = x[np.arange(N+3, 9*N, 8)]
vel_x = x[np.arange(N+4, 9*N, 8)]
vel_y = x[np.arange(N+5, 9*N, 8)]
omega_block = x[np.arange(N+6, 9*N, 8)]
omega_tail = x[np.arange(N+7, 9*N, 8)]

print(u)
print(pos_x[-1])
print(pos_y[-1])
print(theta_block[-1])
print(theta_tail[-1])
print(vel_x[-1])
print(vel_y[-1])
print(omega_block[-1])
print(omega_tail[-1])

'''
#optimization plot
fig1, axs1= plt.subplots(4, 2, figsize=(16, 8))
fig1.suptitle("State Trajectories")
t = np.arange(0, T, T/N)
axs1[0][0].plot(t, pos_x)
axs1[0][0].set_ylabel('x(t)')
axs1[1][0].plot(t, pos_y)
axs1[1][0].set_ylabel('y(t)')
axs1[2][0].plot(t, theta_block)
axs1[2][0].set_ylabel('$\\theta_b$')
axs1[3][0].plot(t, theta_tail)
axs1[3][0].set_ylabel('$\\theta_t$')
axs1[0][1].plot(t, vel_x)
axs1[0][1].set_ylabel('$vel_x$')
axs1[1][1].plot(t, vel_y)
axs1[1][1].set_ylabel('$vel_y$')
axs1[2][1].plot(t, omega_block)
axs1[2][1].set_ylabel('$\omega_b(t)$')
axs1[3][1].plot(t, omega_tail)
axs1[3][1].set_ylabel('$\omega_t(t)$')
'''


# dynamic plot
object = MyController(u=(vel_x[0]/np.cos(theta_block[0]), theta_block[0]),
                      initial_state=(0, 0, theta_block[0]) ,input_torque=u, T=T)
block_traj, block_vel, tail_traj, tail_vel = object.dynamics()

pos_x2=[]
pos_y2=[]
theta_b2=[]
theta_t2=[]
vel_x2=[]
vel_y2=[]
omega_block2=[]
omega_tail2=[]

for i in range(len(block_traj)):
    pos_x2.append(block_traj[i][0])
    pos_y2.append(block_traj[i][1])
    theta_b2.append(block_traj[i][2])
    theta_t2.append(tail_traj[i])

    vel_x2.append(block_vel[i][0])
    vel_y2.append(block_vel[i][1])
    omega_block2.append(block_vel[i][2])
    omega_tail2.append(tail_vel[i])

'''
# for dynamic
pos_x=[]
pos_y=[]
theta_b=[]
theta_t=[]
vel_x=[]
vel_y=[]
omega_block=[]
omega_tail=[]

for i in range(len(block_traj)):
    pos_x.append(block_traj[i][0])
    pos_y.append(block_traj[i][1])
    theta_b.append(block_traj[i][2])
    theta_t.append(tail_traj[i])

    vel_x.append(block_vel[i][0])
    vel_y.append(block_vel[i][1])
    omega_block.append(block_vel[i][2])
    omega_tail.append(tail_vel[i])
'''
''''
#dynamic plot
fig2, axs2 = plt.subplots(4, 2, figsize=(16, 8))
fig2.suptitle("State Trajectories")
t = np.arange(0, T, T/N)
axs2[0][0].plot(t, pos_x)
axs2[0][0].set_ylabel('x(t)')
axs2[1][0].plot(t, pos_y)
axs2[1][0].set_ylabel('y(t)')
axs2[2][0].plot(t, theta_b)
axs2[2][0].set_ylabel('$\\theta_b$')
axs2[3][0].plot(t, theta_t)
axs2[3][0].set_ylabel('$\\theta_t$')
axs2[0][1].plot(t, vel_x)
axs2[0][1].set_ylabel('$vel_x$')
axs2[1][1].plot(t, vel_y)
axs2[1][1].set_ylabel('$vel_y$')
axs2[2][1].plot(t, omega_block)
axs2[2][1].set_ylabel('$\omega_b(t)$')
axs2[3][1].plot(t, omega_tail)
axs2[3][1].set_ylabel('$\omega_t(t)$')

#torque plot
fig3 = plt.figure("Input Trajectory")
plt.plot(t, u)
plt.ylabel("torque")
plt.xlabel('Time (s)')
plt.show()

'''
#comparison plot
fig, axs= plt.subplots(4, 2, figsize=(16, 8))
fig.suptitle("Comparison of State Trajectories", fontsize=20)
t = np.arange(0, T, T/N)
axs[0][0].plot(t, pos_x,'r',label='optimization')
axs[0][0].plot(t,pos_x2,'b',label='dynamics')
axs[0][0].legend(loc='upper left')
axs[0][0].set_ylabel('x(t)')
axs[1][0].plot(t, pos_y,'r',t, pos_y2,'b')
axs[1][0].set_ylabel('y(t)')
axs[2][0].plot(t, theta_block,'r',t, theta_b2,'b')
axs[2][0].set_ylabel('$\\theta_b$')
axs[2][0].set_ylim((-10, 10))
axs[3][0].plot(t, theta_tail,'r',t, theta_t2,'b')
axs[3][0].set_ylabel('$\\theta_t$')
axs[3][0].set_ylim((-10, 40))
axs[0][1].plot(t, vel_x,'r',t, vel_x2,'b')
axs[0][1].set_ylabel('$vel_x$')
axs[0][1].set_ylim((10, 30))
axs[1][1].plot(t, vel_y,'r',t, vel_y2,'b')
axs[1][1].set_ylabel('$vel_y$')
axs[1][1].set_ylim((20, 40))
axs[2][1].plot(t, omega_block,'r',t, omega_block2,'b')
axs[2][1].set_ylabel('$\omega_b(t)$')
axs[2][1].set_ylim((-10, 10))
axs[3][1].plot(t, omega_tail,'r',t, omega_tail2,'b')
axs[3][1].set_ylabel('$\omega_t(t)$')
axs[3][1].set_ylim((-70, 70))
plt.show()



err_pos_x = pos_x - pos_x2
err_pos_y = pos_y - pos_y2
err_theta_block = theta_block - theta_b2
err_theta_tail = theta_tail - theta_t2
err_vel_x = vel_x - vel_x2
err_vel_y = vel_y - vel_y2
err_omega_block = omega_block - omega_block2
err_omega_tail = omega_tail - omega_tail2

fig4, axs4 = plt.subplots(4, 2, figsize=(16, 8))
fig4.suptitle("Error of State Trajectories", fontsize=20)
t = np.arange(0, T, T/N)
axs4[0][0].plot(t, err_pos_x)
axs4[0][0].set_ylabel('x(t)')
axs4[0][0].set_ylim((-1,1))
axs4[1][0].plot(t, err_pos_y)
axs4[1][0].set_ylabel('y(t)')
axs4[1][0].set_ylim((-1,1))
axs4[2][0].plot(t, err_theta_block)
axs4[2][0].set_ylabel('$\\theta_b$')
axs4[2][0].set_ylim((-1,1))
axs4[3][0].plot(t, err_theta_tail)
axs4[3][0].set_ylabel('$\\theta_t$')
axs4[3][0].set_ylim((-1,5))
axs4[0][1].plot(t, err_vel_x)
axs4[0][1].set_ylabel('$vel_x$')
axs4[0][1].set_ylim((-1, 1))
axs4[1][1].plot(t, err_vel_y)
axs4[1][1].set_ylabel('$vel_y$')
axs4[1][1].set_ylim((-1,1))
axs4[2][1].plot(t, err_omega_block)
axs4[2][1].set_ylabel('$\omega_b(t)$')
axs4[2][1].set_ylim((-1,1))
axs4[3][1].plot(t, err_omega_tail)
axs4[3][1].set_ylabel('$\omega_t(t)$')
axs4[3][1].set_ylim((-1,10))
plt.show()
