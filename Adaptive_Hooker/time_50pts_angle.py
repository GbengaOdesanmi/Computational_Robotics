from utility import *
from dynamics import MyController
from animation import animation

x = np.array([8.03906835e-03, 1.55892869e-02, 1.45849853e-02, 1.35463526e-02,
          1.24350026e-02, 1.12337550e-02, 1.01293335e-02, 9.22526151e-03,
          8.47965150e-03, 7.81195221e-03, 7.34679148e-03, 6.94807417e-03,
          6.21076142e-03, 5.16463220e-03, 3.77321518e-03, 2.01537698e-03,
          1.37200091e-05, -1.93262894e-03, -3.57526001e-03, -4.89156745e-03,
          -5.68135251e-03, -6.02338655e-03, -6.09572345e-03, -5.91020354e-03,
          -5.78050541e-03, -5.95730486e-03, -6.36715936e-03, -6.98456155e-03,
          -7.49277160e-03, -7.94494126e-03, -8.67028187e-03, -9.39714550e-03,
          -9.48221543e-03, -8.76417238e-03, -7.51893815e-03, -5.96474840e-03,
          -4.36289061e-03, -3.03128394e-03, -2.06212967e-03, -1.48606584e-03,
          -1.42334771e-03, -1.61312096e-03, -1.74389014e-03, -1.56396161e-03,
          -9.03614387e-04, -1.13650408e-04, 5.97436176e-04, 1.28510840e-03,
          1.82227546e-03, 1.01263358e-03, -8.96454319e-19, -1.73751238e-18,
          9.28213598e-01, 8.95574728e-20, 2.29083174e+01, 3.06029352e+01,
          1.88339949e-19, -9.26661649e-18, 2.04031349e+00, 2.68610712e+00,
          9.36996922e-01, -8.99412390e-02, 2.29148204e+01, 2.97239987e+01,
          1.97263546e-01, -2.01997872e+00, 4.08122956e+00, 5.29382110e+00,
          9.65780196e-01, -3.84681964e-01, 2.29218509e+01, 2.88423136e+01,
          4.49176298e-01, -4.59956529e+00, 6.12261065e+00, 7.82296446e+00,
          1.01623731e+00, -9.01362762e-01, 2.29252639e+01, 2.79593914e+01,
          6.84033419e-01, -7.00450221e+00, 8.16406068e+00, 1.02735011e+01,
          1.08680962e+00, -1.62402331e+00, 2.29233995e+01, 2.70768954e+01,
          9.00941206e-01, -9.22563795e+00, 1.02051326e+01, 1.26456314e+01,
          1.17583829e+00, -2.53567681e+00, 2.29167725e+01, 2.61984745e+01,
          1.09854206e+00, -1.12490707e+01, 1.22455956e+01, 1.49398384e+01,
          1.28160655e+00, -3.61874385e+00, 2.29097230e+01, 2.53268232e+01,
          1.27689381e+00, -1.30753926e+01, 1.42856713e+01, 1.71566187e+01,
          1.40251073e+00, -4.85680260e+00, 2.29080747e+01, 2.44595605e+01,
          1.43847747e+00, -1.47300093e+01, 1.63258841e+01, 1.92960440e+01,
          1.53719096e+00, -6.23592822e+00, 2.29128011e+01, 2.35895166e+01,
          1.58628860e+00, -1.62435953e+01, 1.83664967e+01, 2.13576860e+01,
          1.68450866e+00, -7.74446144e+00, 2.29170530e+01, 2.27126357e+01,
          1.72230059e+00, -1.76363581e+01, 2.04071924e+01, 2.33411941e+01,
          1.84351734e+00, -9.37271028e+00, 2.29146699e+01, 2.18347166e+01,
          1.84885479e+00, -1.89322730e+01, 2.24475981e+01, 2.52468040e+01,
          2.01347475e+00, -1.11130742e+01, 2.29105385e+01, 2.09631314e+01,
          1.96819682e+00, -2.01543354e+01, 2.44879076e+01, 2.70748722e+01,
          2.19363747e+00, -1.29579405e+01, 2.29125105e+01, 2.00932168e+01,
          2.07805460e+00, -2.12792791e+01, 2.65284346e+01, 2.88252172e+01,
          2.38292026e+00, -1.48961962e+01, 2.29154224e+01, 1.92175564e+01,
          2.17302314e+00, -2.22517570e+01, 2.85690017e+01, 3.04975897e+01,
          2.57975405e+00, -1.69117742e+01, 2.29134120e+01, 1.83420431e+01,
          2.24764160e+00, -2.30158500e+01, 3.06094387e+01, 3.20921503e+01,
          2.78206207e+00, -1.89834084e+01, 2.29124987e+01, 1.74699867e+01,
          2.29596821e+00, -2.35107145e+01, 3.26498614e+01, 3.36089963e+01,
          2.98727615e+00, -2.10848005e+01, 2.29130910e+01, 1.65966615e+01,
          2.31290832e+00, -2.36841812e+01, 3.46903237e+01, 3.50480831e+01,
          3.19253119e+00, -2.31866121e+01, 2.29133899e+01, 1.57236052e+01,
          2.29688813e+00, -2.35201344e+01, 3.67308619e+01, 3.64093559e+01,
          3.39502548e+00, -2.52601536e+01, 2.29147942e+01, 1.48490444e+01,
          2.25090500e+00, -2.30492672e+01, 3.87713760e+01, 3.76927117e+01,
          3.59232497e+00, -2.72805004e+01, 2.29128495e+01, 1.39736779e+01,
          2.18021889e+00, -2.23254414e+01, 4.08117272e+01, 3.88983196e+01,
          3.78254685e+00, -2.92283725e+01, 2.29111352e+01, 1.31029155e+01,
          2.09194987e+00, -2.14215667e+01, 4.28521535e+01, 4.00263241e+01,
          3.96448750e+00, -3.10914448e+01, 2.29145362e+01, 1.22307927e+01,
          1.99423176e+00, -2.04209332e+01, 4.48927898e+01, 4.10764365e+01,
          4.13757216e+00, -3.28638316e+01, 2.29158528e+01, 1.13535451e+01,
          1.89305423e+00, -1.93848753e+01, 4.69333231e+01, 4.20485293e+01,
          4.30168886e+00, -3.45443867e+01, 2.29122221e+01, 1.04785627e+01,
          1.79282162e+00, -1.83584934e+01, 4.89736195e+01, 4.29429178e+01,
          4.45699685e+00, -3.61347405e+01, 2.29105309e+01, 9.60839342e+00,
          1.69522063e+00, -1.73590593e+01, 5.10139801e+01, 4.37597651e+01,
          4.60359581e+00, -3.76359138e+01, 2.29136647e+01, 8.73707324e+00,
          1.59722642e+00, -1.63555985e+01, 5.30546213e+01, 4.44988023e+01,
          4.74125014e+00, -3.90454942e+01, 2.29168336e+01, 7.86086839e+00,
          1.49433447e+00, -1.53019850e+01, 5.50953355e+01, 4.51597403e+01,
          4.86935991e+00, -4.03573382e+01, 2.29153048e+01, 6.98305349e+00,
          1.38286637e+00, -1.41605516e+01, 5.71357640e+01, 4.57426756e+01,
          4.98712484e+00, -4.15632511e+01, 2.29104158e+01, 6.10901589e+00,
          1.26200099e+00, -1.29228902e+01, 5.91758372e+01, 4.62479867e+01,
          5.09376950e+00, -4.26552925e+01, 2.29073239e+01, 5.23970027e+00,
          1.13311779e+00, -1.16031262e+01, 6.12158496e+01, 4.66759365e+01,
          5.18849919e+00, -4.36253245e+01, 2.29090531e+01, 4.37156897e+00,
          9.94404039e-01, -1.01826974e+01, 6.32561910e+01, 4.70264560e+01,
          5.27033636e+00, -4.44633371e+01, 2.29147120e+01, 3.50070512e+00,
          8.43566422e-01, -8.63812016e+00, 6.52970706e+01, 4.72992326e+01,
          5.33843937e+00, -4.51607119e+01, 2.29211402e+01, 2.62554741e+00,
          6.85950300e-01, -7.02413107e+00, 6.73384360e+01, 4.74939389e+01,
          5.39274170e+00, -4.57167677e+01, 2.29256214e+01, 1.74733692e+00,
          5.33618615e-01, -5.46425461e+00, 6.93800841e+01, 4.76104017e+01,
          5.43420843e+00, -4.61413871e+01, 2.29274894e+01, 8.68286215e-01,
          3.97677533e-01, -4.07221794e+00, 7.14218150e+01, 4.76486132e+01,
          5.46461002e+00, -4.64526993e+01, 2.29274820e+01, -1.00979515e-02,
          2.85107704e-01, -2.91950289e+00, 7.34635064e+01, 4.76086576e+01,
          5.48616026e+00, -4.66733738e+01, 2.29266026e+01, -8.87260745e-01,
          1.98886438e-01, -2.03659713e+00, 7.55051118e+01, 4.74906405e+01,
          5.50112281e+00, -4.68265903e+01, 2.29255500e+01, -1.76326973e+00,
          1.37155477e-01, -1.40447209e+00, 7.75466295e+01, 4.72946511e+01,
          5.51144337e+00, -4.69322728e+01, 2.29246340e+01, -2.63843196e+00,
          9.46326364e-02, -9.69038196e-01, 7.95880742e+01, 4.70207506e+01,
          5.51855160e+00, -4.70050611e+01, 2.29239089e+01, -3.51306375e+00,
          6.50101920e-02, -6.65704366e-01, 8.16294580e+01, 4.66689725e+01,
          5.52325935e+00, -4.70532685e+01, 2.29232675e+01, -4.38747457e+00,
          4.07206773e-02, -4.16979736e-01, 8.36707822e+01, 4.62393261e+01,
          5.52575686e+00, -4.70788430e+01, 2.29225698e+01, -5.26189794e+00,
          1.53704324e-02, -1.57393228e-01, 8.57120405e+01, 4.57318074e+01,
          5.52587772e+00, -4.70800806e+01, 2.29217877e+01, -6.13639937e+00,
          -1.26558907e-02, 1.29596321e-01, 8.77532301e+01, 4.51464132e+01,
          5.52352107e+00, -4.70559486e+01, 2.29210261e+01, -7.01089531e+00,
          -4.02718036e-02, 4.12383269e-01, 8.97943614e+01, 4.44831530e+01,
          5.51901753e+00, -4.70098323e+01, 2.29204784e+01, -7.88517959e+00,
          -6.08725941e-02, 6.23335363e-01, 9.18354588e+01, 4.37420539e+01,
          5.51321858e+00, -4.69504510e+01, 2.29202649e+01, -8.75906919e+00,
          -6.93653233e-02, 7.10300910e-01, 9.38765507e+01, 4.29231530e+01,
          5.50722132e+00, -4.68890391e+01, 2.29203557e+01, -9.63251964e+00,
          -6.53263914e-02, 6.68942248e-01, 9.59176614e+01, 4.20264894e+01,
          5.50210369e+00, -4.68366346e+01, 2.29206857e+01, -1.05055328e+01,
          -4.96097908e-02, 5.08004257e-01, 9.79588094e+01, 4.10521003e+01,
          5.49884096e+00, -4.68032242e+01, 2.29211948e+01, -1.13781469e+01,
          -2.36675050e-02, 2.42355252e-01, 1.00000000e+02, 4.00000000e+01,
          5.49778714e+00, -4.67924331e+01, 2.29216424e+01, -1.22508386e+01,
          5.91841894e-19, 1.31872784e-12, 4.45258353e+00])




T = x[-1]
N = 50
u = x[:N]
pos_x = x[np.arange(N, 9*N, 8)]
pos_y = x[np.arange(N+1, 9*N, 8)]
theta_block = x[np.arange(N+2, 9*N, 8)]
theta_tail = x[np.arange(N+3, 9*N, 8)]
vel_x = x[np.arange(N+4, 9*N, 8)]
vel_y = x[np.arange(N+5, 9*N, 8)]
omega_block = x[np.arange(N+6, 9*N, 8)]
omega_tail = x[np.arange(N+7, 9*N, 8)]

goal_state = [100, 40, 1.75*np.pi]
block_traj = []
tail_traj = []
for i in range(N):
    block_traj.append((pos_x[i], pos_y[i], theta_block[i]))
    tail_traj.append(theta_tail[i])

animation(block_traj, tail_traj, goal_state)

'''
#optimization plot
fig1, axs1= plt.subplots(4, 2, figsize=(16, 8))
fig1.suptitle("State Trajectories")
t = np.arange(0, T, T/N)
axs1[0][0].plot(t, pos_x)
axs1[0][0].set_ylabel('x(t)')
axs1[1][0].plot(t, pos_y)
axs1[1][0].set_ylabel('y(t)')
axs1[2][0].plot(t, theta_block)
axs1[2][0].set_ylabel('$\\theta_b$')
axs1[3][0].plot(t, theta_tail)
axs1[3][0].set_ylabel('$\\theta_t$')
axs1[0][1].plot(t, vel_x)
axs1[0][1].set_ylabel('$vel_x$')
axs1[1][1].plot(t, vel_y)
axs1[1][1].set_ylabel('$vel_y$')
axs1[2][1].plot(t, omega_block)
axs1[2][1].set_ylabel('$\omega_b(t)$')
axs1[3][1].plot(t, omega_tail)
axs1[3][1].set_ylabel('$\omega_t(t)$')

print(vel_x[0]/np.cos(theta_block[0]))
print(np.rad2deg(theta_block[0]))
print(vel_x[0])

'''
# dynamic plot
object = MyController(u=(vel_x[0]/np.cos(theta_block[0]), theta_block[0]),
                      initial_state=(0, 0, theta_block[0]), input_torque=u, T=T)
block_traj, block_vel, tail_traj, tail_vel = object.dynamics()

print(vel_x[0]/np.cos(theta_block[0]))
print(np.rad2deg(theta_block[0]))

pos_x2=[]
pos_y2=[]
theta_b2=[]
theta_t2=[]
vel_x2=[]
vel_y2=[]
omega_block2=[]
omega_tail2=[]

for i in range(len(block_traj)):
    pos_x2.append(block_traj[i][0])
    pos_y2.append(block_traj[i][1])
    theta_b2.append(block_traj[i][2])
    theta_t2.append(tail_traj[i])

    vel_x2.append(block_vel[i][0])
    vel_y2.append(block_vel[i][1])
    omega_block2.append(block_vel[i][2])
    omega_tail2.append(tail_vel[i])

'''
# for dynamic
pos_x=[]
pos_y=[]
theta_b=[]
theta_t=[]
vel_x=[]
vel_y=[]
omega_block=[]
omega_tail=[]

for i in range(len(block_traj)):
    pos_x.append(block_traj[i][0])
    pos_y.append(block_traj[i][1])
    theta_b.append(block_traj[i][2])
    theta_t.append(tail_traj[i])

    vel_x.append(block_vel[i][0])
    vel_y.append(block_vel[i][1])
    omega_block.append(block_vel[i][2])
    omega_tail.append(tail_vel[i])
'''
''''
#dynamic plot
fig2, axs2 = plt.subplots(4, 2, figsize=(16, 8))
fig2.suptitle("State Trajectories")
t = np.arange(0, T, T/N)
axs2[0][0].plot(t, pos_x)
axs2[0][0].set_ylabel('x(t)')
axs2[1][0].plot(t, pos_y)
axs2[1][0].set_ylabel('y(t)')
axs2[2][0].plot(t, theta_b)
axs2[2][0].set_ylabel('$\\theta_b$')
axs2[3][0].plot(t, theta_t)
axs2[3][0].set_ylabel('$\\theta_t$')
axs2[0][1].plot(t, vel_x)
axs2[0][1].set_ylabel('$vel_x$')
axs2[1][1].plot(t, vel_y)
axs2[1][1].set_ylabel('$vel_y$')
axs2[2][1].plot(t, omega_block)
axs2[2][1].set_ylabel('$\omega_b(t)$')
axs2[3][1].plot(t, omega_tail)
axs2[3][1].set_ylabel('$\omega_t(t)$')

#torque plot
fig3 = plt.figure("Input Trajectory")
plt.plot(t, u)
plt.ylabel("torque")
plt.xlabel('Time (s)')
plt.show()

'''
#comparison plot
fig, axs= plt.subplots(4, 2, figsize=(16, 8))
fig.suptitle("Comparison of State Trajectories", fontsize=20)
t = np.arange(0, T, T/N)
axs[0][0].plot(t, pos_x,'r',label='optimization')
axs[0][0].plot(t,pos_x2,'b',label='dynamics')
axs[0][0].legend(loc='upper left')
axs[0][0].set_ylabel('x(t)')
axs[1][0].plot(t, pos_y,'r',t, pos_y2,'b')
axs[1][0].set_ylabel('y(t)')
axs[2][0].plot(t, theta_block,'r',t, theta_b2,'b')
axs[2][0].set_ylabel('$\\theta_b$')
axs[2][0].set_ylim((-1, 1))
axs[3][0].plot(t, theta_tail,'r',t, theta_t2,'b')
axs[3][0].set_ylabel('$\\theta_t$')
axs[3][0].set_ylim((-10, 10))
axs[0][1].plot(t, vel_x,'r',t, vel_x2,'b')
axs[0][1].set_ylabel('$vel_x$')
axs[0][1].set_ylim((20, 60))
axs[1][1].plot(t, vel_y,'r',t, vel_y2,'b')
axs[1][1].set_ylabel('$vel_y$')
axs[1][1].set_ylim((-10, 30))
axs[2][1].plot(t, omega_block,'r',t, omega_block2,'b')
axs[2][1].set_ylabel('$\omega_b(t)$')
axs[2][1].set_ylim((-10, 10))
axs[3][1].plot(t, omega_tail,'r',t, omega_tail2,'b')
axs[3][1].set_ylabel('$\omega_t(t)$')
axs[3][1].set_ylim((-10, 10))
plt.show()



err_pos_x = pos_x - pos_x2
err_pos_y = pos_y - pos_y2
err_theta_block = theta_block - theta_b2
err_theta_tail = theta_tail - theta_t2
err_vel_x = vel_x - vel_x2
err_vel_y = vel_y - vel_y2
err_omega_block = omega_block - omega_block2
err_omega_tail = omega_tail - omega_tail2

fig4, axs4 = plt.subplots(4, 2, figsize=(16, 8))
fig4.suptitle("Error of State Trajectories", fontsize=20)
t = np.arange(0, T, T/N)
axs4[0][0].plot(t, err_pos_x)
axs4[0][0].set_ylabel('x(t)')
axs4[0][0].set_ylim((-1,1))
axs4[1][0].plot(t, err_pos_y)
axs4[1][0].set_ylabel('y(t)')
axs4[1][0].set_ylim((-1,1))
axs4[2][0].plot(t, err_theta_block)
axs4[2][0].set_ylabel('$\\theta_b$')
axs4[2][0].set_ylim((-1,1))
axs4[3][0].plot(t, err_theta_tail)
axs4[3][0].set_ylabel('$\\theta_t$')
axs4[3][0].set_ylim((-1,1))
axs4[0][1].plot(t, err_vel_x)
axs4[0][1].set_ylabel('$vel_x$')
axs4[0][1].set_ylim((-1, 1))
axs4[1][1].plot(t, err_vel_y)
axs4[1][1].set_ylabel('$vel_y$')
axs4[1][1].set_ylim((-1,1))
axs4[2][1].plot(t, err_omega_block)
axs4[2][1].set_ylabel('$\omega_b(t)$')
axs4[2][1].set_ylim((-1,1))
axs4[3][1].plot(t, err_omega_tail)
axs4[3][1].set_ylabel('$\omega_t(t)$')
axs4[3][1].set_ylim((-1,1))
plt.show()


t = np.arange(0, T, T/N)
fig5 = plt.figure("Input Trajectory")
plt.plot(t, u)
plt.ylabel("torque")
plt.xlabel('Time (s)')
plt.ylim((-0.127, 0.127))
plt.show()